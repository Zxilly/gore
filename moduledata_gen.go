// This file is part of GoRE.
//
// Copyright (C) 2019-2023 GoRE Authors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by go generate; DO NOT EDIT.

package gore

import "fmt"

type moduledata_1_22_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	covctrs                                     uint32
	ecovctrs                                    uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	rodata                                      uint32
	gofunc                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
	inittasks, inittaskslen, inittaskscap       uint32
}

func (md moduledata_1_22_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
		GoFuncVal:     uint64(md.gofunc),
	}
}

type moduledata_1_22_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	covctrs                                     uint64
	ecovctrs                                    uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	rodata                                      uint64
	gofunc                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
	inittasks, inittaskslen, inittaskscap       uint64
}

func (md moduledata_1_22_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
		GoFuncVal:     md.gofunc,
	}
}

type moduledata_1_21_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	covctrs                                     uint32
	ecovctrs                                    uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	rodata                                      uint32
	gofunc                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
	inittasks, inittaskslen, inittaskscap       uint32
}

func (md moduledata_1_21_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
		GoFuncVal:     uint64(md.gofunc),
	}
}

type moduledata_1_21_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	covctrs                                     uint64
	ecovctrs                                    uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	rodata                                      uint64
	gofunc                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
	inittasks, inittaskslen, inittaskscap       uint64
}

func (md moduledata_1_21_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
		GoFuncVal:     md.gofunc,
	}
}

type moduledata_1_20_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	covctrs                                     uint32
	ecovctrs                                    uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	rodata                                      uint32
	gofunc                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_20_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
		GoFuncVal:     uint64(md.gofunc),
	}
}

type moduledata_1_20_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	covctrs                                     uint64
	ecovctrs                                    uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	rodata                                      uint64
	gofunc                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_20_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
		GoFuncVal:     md.gofunc,
	}
}

type moduledata_1_19_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	rodata                                      uint32
	gofunc                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_19_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
		GoFuncVal:     uint64(md.gofunc),
	}
}

type moduledata_1_19_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	rodata                                      uint64
	gofunc                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_19_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
		GoFuncVal:     md.gofunc,
	}
}

type moduledata_1_18_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	rodata                                      uint32
	gofunc                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_18_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
		GoFuncVal:     uint64(md.gofunc),
	}
}

type moduledata_1_18_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	rodata                                      uint64
	gofunc                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_18_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
		GoFuncVal:     md.gofunc,
	}
}

type moduledata_1_17_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_17_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_17_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_17_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_16_32 struct {
	pcHeader                                    uint32
	funcnametab, funcnametablen, funcnametabcap uint32
	cutab, cutablen, cutabcap                   uint32
	filetab, filetablen, filetabcap             uint32
	pctab, pctablen, pctabcap                   uint32
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_16_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_16_64 struct {
	pcHeader                                    uint64
	funcnametab, funcnametablen, funcnametabcap uint64
	cutab, cutablen, cutabcap                   uint64
	filetab, filetablen, filetabcap             uint64
	pctab, pctablen, pctabcap                   uint64
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_16_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_15_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_15_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_15_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_15_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_14_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_14_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_14_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_14_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_13_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_13_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_13_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_13_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_12_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_12_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_12_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_12_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_11_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_11_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_11_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_11_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_10_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_10_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_10_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_10_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_9_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_9_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_9_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_9_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_8_32 struct {
	pclntable, pclntablelen, pclntablecap       uint32
	ftab, ftablen, ftabcap                      uint32
	filetab, filetablen, filetabcap             uint32
	findfunctab                                 uint32
	minpc                                       uint32
	maxpc                                       uint32
	text                                        uint32
	etext                                       uint32
	noptrdata                                   uint32
	enoptrdata                                  uint32
	data                                        uint32
	edata                                       uint32
	bss                                         uint32
	ebss                                        uint32
	noptrbss                                    uint32
	enoptrbss                                   uint32
	end                                         uint32
	gcdata                                      uint32
	gcbss                                       uint32
	types                                       uint32
	etypes                                      uint32
	textsectmap, textsectmaplen, textsectmapcap uint32
	typelinks, typelinkslen, typelinkscap       uint32
	itablinks, itablinkslen, itablinkscap       uint32
	ptab, ptablen, ptabcap                      uint32
	pluginpath, pluginpathlen                   uint32
	pkghashes, pkghasheslen, pkghashescap       uint32
}

func (md moduledata_1_8_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_8_64 struct {
	pclntable, pclntablelen, pclntablecap       uint64
	ftab, ftablen, ftabcap                      uint64
	filetab, filetablen, filetabcap             uint64
	findfunctab                                 uint64
	minpc                                       uint64
	maxpc                                       uint64
	text                                        uint64
	etext                                       uint64
	noptrdata                                   uint64
	enoptrdata                                  uint64
	data                                        uint64
	edata                                       uint64
	bss                                         uint64
	ebss                                        uint64
	noptrbss                                    uint64
	enoptrbss                                   uint64
	end                                         uint64
	gcdata                                      uint64
	gcbss                                       uint64
	types                                       uint64
	etypes                                      uint64
	textsectmap, textsectmaplen, textsectmapcap uint64
	typelinks, typelinkslen, typelinkscap       uint64
	itablinks, itablinkslen, itablinkscap       uint64
	ptab, ptablen, ptabcap                      uint64
	pluginpath, pluginpathlen                   uint64
	pkghashes, pkghasheslen, pkghashescap       uint64
}

func (md moduledata_1_8_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_7_32 struct {
	pclntable, pclntablelen, pclntablecap uint32
	ftab, ftablen, ftabcap                uint32
	filetab, filetablen, filetabcap       uint32
	findfunctab                           uint32
	minpc                                 uint32
	maxpc                                 uint32
	text                                  uint32
	etext                                 uint32
	noptrdata                             uint32
	enoptrdata                            uint32
	data                                  uint32
	edata                                 uint32
	bss                                   uint32
	ebss                                  uint32
	noptrbss                              uint32
	enoptrbss                             uint32
	end                                   uint32
	gcdata                                uint32
	gcbss                                 uint32
	types                                 uint32
	etypes                                uint32
	typelinks, typelinkslen, typelinkscap uint32
	itablinks, itablinkslen, itablinkscap uint32
}

func (md moduledata_1_7_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypesAddr:     uint64(md.types),
		TypesLen:      uint64(md.etypes - md.types),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		ITabLinkAddr:  uint64(md.itablinks),
		ITabLinkLen:   uint64(md.itablinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_7_64 struct {
	pclntable, pclntablelen, pclntablecap uint64
	ftab, ftablen, ftabcap                uint64
	filetab, filetablen, filetabcap       uint64
	findfunctab                           uint64
	minpc                                 uint64
	maxpc                                 uint64
	text                                  uint64
	etext                                 uint64
	noptrdata                             uint64
	enoptrdata                            uint64
	data                                  uint64
	edata                                 uint64
	bss                                   uint64
	ebss                                  uint64
	noptrbss                              uint64
	enoptrbss                             uint64
	end                                   uint64
	gcdata                                uint64
	gcbss                                 uint64
	types                                 uint64
	etypes                                uint64
	typelinks, typelinkslen, typelinkscap uint64
	itablinks, itablinkslen, itablinkscap uint64
}

func (md moduledata_1_7_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypesAddr:     md.types,
		TypesLen:      md.etypes - md.types,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		ITabLinkAddr:  md.itablinks,
		ITabLinkLen:   md.itablinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_6_32 struct {
	pclntable, pclntablelen, pclntablecap uint32
	ftab, ftablen, ftabcap                uint32
	filetab, filetablen, filetabcap       uint32
	findfunctab                           uint32
	minpc                                 uint32
	maxpc                                 uint32
	text                                  uint32
	etext                                 uint32
	noptrdata                             uint32
	enoptrdata                            uint32
	data                                  uint32
	edata                                 uint32
	bss                                   uint32
	ebss                                  uint32
	noptrbss                              uint32
	enoptrbss                             uint32
	end                                   uint32
	gcdata                                uint32
	gcbss                                 uint32
	typelinks, typelinkslen, typelinkscap uint32
}

func (md moduledata_1_6_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_6_64 struct {
	pclntable, pclntablelen, pclntablecap uint64
	ftab, ftablen, ftabcap                uint64
	filetab, filetablen, filetabcap       uint64
	findfunctab                           uint64
	minpc                                 uint64
	maxpc                                 uint64
	text                                  uint64
	etext                                 uint64
	noptrdata                             uint64
	enoptrdata                            uint64
	data                                  uint64
	edata                                 uint64
	bss                                   uint64
	ebss                                  uint64
	noptrbss                              uint64
	enoptrbss                             uint64
	end                                   uint64
	gcdata                                uint64
	gcbss                                 uint64
	typelinks, typelinkslen, typelinkscap uint64
}

func (md moduledata_1_6_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

type moduledata_1_5_32 struct {
	pclntable, pclntablelen, pclntablecap uint32
	ftab, ftablen, ftabcap                uint32
	filetab, filetablen, filetabcap       uint32
	findfunctab                           uint32
	minpc                                 uint32
	maxpc                                 uint32
	text                                  uint32
	etext                                 uint32
	noptrdata                             uint32
	enoptrdata                            uint32
	data                                  uint32
	edata                                 uint32
	bss                                   uint32
	ebss                                  uint32
	noptrbss                              uint32
	enoptrbss                             uint32
	end                                   uint32
	gcdata                                uint32
	gcbss                                 uint32
	typelinks, typelinkslen, typelinkscap uint32
}

func (md moduledata_1_5_32) toModuledata() moduledata {
	return moduledata{
		TextAddr:      uint64(md.text),
		TextLen:       uint64(md.etext - md.text),
		NoPtrDataAddr: uint64(md.noptrdata),
		NoPtrDataLen:  uint64(md.enoptrdata - md.noptrdata),
		DataAddr:      uint64(md.data),
		DataLen:       uint64(md.edata - md.data),
		BssAddr:       uint64(md.bss),
		BssLen:        uint64(md.ebss - md.bss),
		NoPtrBssAddr:  uint64(md.noptrbss),
		NoPtrBssLen:   uint64(md.enoptrbss - md.noptrbss),
		TypelinkAddr:  uint64(md.typelinks),
		TypelinkLen:   uint64(md.typelinkslen),
		FuncTabAddr:   uint64(md.ftab),
		FuncTabLen:    uint64(md.ftablen),
		PCLNTabAddr:   uint64(md.pclntable),
		PCLNTabLen:    uint64(md.pclntablelen),
	}
}

type moduledata_1_5_64 struct {
	pclntable, pclntablelen, pclntablecap uint64
	ftab, ftablen, ftabcap                uint64
	filetab, filetablen, filetabcap       uint64
	findfunctab                           uint64
	minpc                                 uint64
	maxpc                                 uint64
	text                                  uint64
	etext                                 uint64
	noptrdata                             uint64
	enoptrdata                            uint64
	data                                  uint64
	edata                                 uint64
	bss                                   uint64
	ebss                                  uint64
	noptrbss                              uint64
	enoptrbss                             uint64
	end                                   uint64
	gcdata                                uint64
	gcbss                                 uint64
	typelinks, typelinkslen, typelinkscap uint64
}

func (md moduledata_1_5_64) toModuledata() moduledata {
	return moduledata{
		TextAddr:      md.text,
		TextLen:       md.etext - md.text,
		NoPtrDataAddr: md.noptrdata,
		NoPtrDataLen:  md.enoptrdata - md.noptrdata,
		DataAddr:      md.data,
		DataLen:       md.edata - md.data,
		BssAddr:       md.bss,
		BssLen:        md.ebss - md.bss,
		NoPtrBssAddr:  md.noptrbss,
		NoPtrBssLen:   md.enoptrbss - md.noptrbss,
		TypelinkAddr:  md.typelinks,
		TypelinkLen:   md.typelinkslen,
		FuncTabAddr:   md.ftab,
		FuncTabLen:    md.ftablen,
		PCLNTabAddr:   md.pclntable,
		PCLNTabLen:    md.pclntablelen,
	}
}

func selectModuleData(v int, bits int) (modulable, error) {
	switch {
	case v == 22 && bits == 32:
		return &moduledata_1_22_32{}, nil
	case v == 22 && bits == 64:
		return &moduledata_1_22_64{}, nil
	case v == 21 && bits == 32:
		return &moduledata_1_21_32{}, nil
	case v == 21 && bits == 64:
		return &moduledata_1_21_64{}, nil
	case v == 20 && bits == 32:
		return &moduledata_1_20_32{}, nil
	case v == 20 && bits == 64:
		return &moduledata_1_20_64{}, nil
	case v == 19 && bits == 32:
		return &moduledata_1_19_32{}, nil
	case v == 19 && bits == 64:
		return &moduledata_1_19_64{}, nil
	case v == 18 && bits == 32:
		return &moduledata_1_18_32{}, nil
	case v == 18 && bits == 64:
		return &moduledata_1_18_64{}, nil
	case v == 17 && bits == 32:
		return &moduledata_1_17_32{}, nil
	case v == 17 && bits == 64:
		return &moduledata_1_17_64{}, nil
	case v == 16 && bits == 32:
		return &moduledata_1_16_32{}, nil
	case v == 16 && bits == 64:
		return &moduledata_1_16_64{}, nil
	case v == 15 && bits == 32:
		return &moduledata_1_15_32{}, nil
	case v == 15 && bits == 64:
		return &moduledata_1_15_64{}, nil
	case v == 14 && bits == 32:
		return &moduledata_1_14_32{}, nil
	case v == 14 && bits == 64:
		return &moduledata_1_14_64{}, nil
	case v == 13 && bits == 32:
		return &moduledata_1_13_32{}, nil
	case v == 13 && bits == 64:
		return &moduledata_1_13_64{}, nil
	case v == 12 && bits == 32:
		return &moduledata_1_12_32{}, nil
	case v == 12 && bits == 64:
		return &moduledata_1_12_64{}, nil
	case v == 11 && bits == 32:
		return &moduledata_1_11_32{}, nil
	case v == 11 && bits == 64:
		return &moduledata_1_11_64{}, nil
	case v == 10 && bits == 32:
		return &moduledata_1_10_32{}, nil
	case v == 10 && bits == 64:
		return &moduledata_1_10_64{}, nil
	case v == 9 && bits == 32:
		return &moduledata_1_9_32{}, nil
	case v == 9 && bits == 64:
		return &moduledata_1_9_64{}, nil
	case v == 8 && bits == 32:
		return &moduledata_1_8_32{}, nil
	case v == 8 && bits == 64:
		return &moduledata_1_8_64{}, nil
	case v == 7 && bits == 32:
		return &moduledata_1_7_32{}, nil
	case v == 7 && bits == 64:
		return &moduledata_1_7_64{}, nil
	case v == 6 && bits == 32:
		return &moduledata_1_6_32{}, nil
	case v == 6 && bits == 64:
		return &moduledata_1_6_64{}, nil
	case v == 5 && bits == 32:
		return &moduledata_1_5_32{}, nil
	case v == 5 && bits == 64:
		return &moduledata_1_5_64{}, nil
	default:
		return nil, fmt.Errorf("unsupported version %d and bits %d", v, bits)
	}
}

func getModuleDataList(bits int) ([]modulable, error) {
	if bits != 32 && bits != 64 {
		return nil, fmt.Errorf("unsupported bits %!d(MISSING)", bits)
	}
	if bits == 32 {
		return []modulable{
			&moduledata_1_22_32{},
			&moduledata_1_21_32{},
			&moduledata_1_20_32{},
			&moduledata_1_19_32{},
			&moduledata_1_18_32{},
			&moduledata_1_17_32{},
			&moduledata_1_16_32{},
			&moduledata_1_15_32{},
			&moduledata_1_14_32{},
			&moduledata_1_13_32{},
			&moduledata_1_12_32{},
			&moduledata_1_11_32{},
			&moduledata_1_10_32{},
			&moduledata_1_9_32{},
			&moduledata_1_8_32{},
			&moduledata_1_7_32{},
			&moduledata_1_6_32{},
			&moduledata_1_5_32{},
		}, nil
	} else {
		return []modulable{
			&moduledata_1_22_64{},
			&moduledata_1_21_64{},
			&moduledata_1_20_64{},
			&moduledata_1_19_64{},
			&moduledata_1_18_64{},
			&moduledata_1_17_64{},
			&moduledata_1_16_64{},
			&moduledata_1_15_64{},
			&moduledata_1_14_64{},
			&moduledata_1_13_64{},
			&moduledata_1_12_64{},
			&moduledata_1_11_64{},
			&moduledata_1_10_64{},
			&moduledata_1_9_64{},
			&moduledata_1_8_64{},
			&moduledata_1_7_64{},
			&moduledata_1_6_64{},
			&moduledata_1_5_64{},
		}, nil
	}
}
